[
  {
    "$type": "ObjectType",
    "name": "CatalogTarget",
    "properties": {
      "ConnectionName": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The name of the connection for an Amazon S3-backed Data Catalog table to be a target of the crawl when using a Catalog connection type paired with a NETWORK Connection type."
      },
      "DatabaseName": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The name of the database to be synchronized."
      },
      "DlqEventQueueArn": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "A valid Amazon dead-letter SQS ARN. For example, arn:aws:sqs:region:account:deadLetterQueue."
      },
      "EventQueueArn": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "A valid Amazon SQS ARN. For example, arn:aws:sqs:region:account:sqs."
      },
      "Tables": {
        "type": {
          "$ref": "#/13"
        },
        "flags": 0,
        "description": "A list of the tables to be synchronized."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "DeltaTarget",
    "properties": {
      "ConnectionName": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The name of the connection to use to connect to the Delta table target."
      },
      "CreateNativeDeltaTable": {
        "type": {
          "$ref": "#/14"
        },
        "flags": 0,
        "description": "Specifies whether the crawler will create native tables, to allow integration with query engines that support querying of the Delta transaction log directly."
      },
      "DeltaTables": {
        "type": {
          "$ref": "#/15"
        },
        "flags": 0,
        "description": ""
      },
      "WriteManifest": {
        "type": {
          "$ref": "#/14"
        },
        "flags": 0,
        "description": "Specifies whether to write the manifest files to the Delta table path."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "DynamoDBTarget",
    "properties": {
      "Path": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The name of the DynamoDB table to crawl."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "IcebergTarget",
    "properties": {
      "ConnectionName": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The name of the connection to use to connect to the Iceberg target."
      },
      "Exclusions": {
        "type": {
          "$ref": "#/16"
        },
        "flags": 0,
        "description": "A list of global patterns used to exclude from the crawl."
      },
      "MaximumTraversalDepth": {
        "type": {
          "$ref": "#/17"
        },
        "flags": 0,
        "description": "The maximum depth of Amazon S3 paths that the crawler can traverse to discover the Iceberg metadata folder in your Amazon S3 path. Used to limit the crawler run time."
      },
      "Paths": {
        "type": {
          "$ref": "#/18"
        },
        "flags": 0,
        "description": "One or more Amazon S3 paths that contains Iceberg metadata folders as s3://bucket/prefix ."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "JdbcTarget",
    "properties": {
      "ConnectionName": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The name of the connection to use to connect to the JDBC target."
      },
      "EnableAdditionalMetadata": {
        "type": {
          "$ref": "#/19"
        },
        "flags": 0,
        "description": "Specify a value of RAWTYPES or COMMENTS to enable additional metadata in table responses. RAWTYPES provides the native-level datatype. COMMENTS provides comments associated with a column or table in the database.\n\nIf you do not need additional metadata, keep the field empty."
      },
      "Exclusions": {
        "type": {
          "$ref": "#/20"
        },
        "flags": 0,
        "description": "A list of glob patterns used to exclude from the crawl. For more information, see Catalog Tables with a Crawler."
      },
      "Path": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The path of the JDBC target."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "LakeFormationConfiguration",
    "properties": {
      "AccountId": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "Required for cross account crawls. For same account crawls as the target data, this can be left as null."
      },
      "UseLakeFormationCredentials": {
        "type": {
          "$ref": "#/14"
        },
        "flags": 0,
        "description": "Specifies whether to use AWS Lake Formation credentials for the crawler instead of the IAM role credentials."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "MongoDBTarget",
    "properties": {
      "ConnectionName": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The name of the connection to use to connect to the Amazon DocumentDB or MongoDB target."
      },
      "Path": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The path of the Amazon DocumentDB or MongoDB target (database/collection)."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "RecrawlPolicy",
    "properties": {
      "RecrawlBehavior": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "Specifies whether to crawl the entire dataset again or to crawl only folders that were added since the last crawler run. A value of CRAWL_EVERYTHING specifies crawling the entire dataset again. A value of CRAWL_NEW_FOLDERS_ONLY specifies crawling only folders that were added since the last crawler run. A value of CRAWL_EVENT_MODE specifies crawling only the changes identified by Amazon S3 events."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "S3Target",
    "properties": {
      "ConnectionName": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The name of a connection which allows a job or crawler to access data in Amazon S3 within an Amazon Virtual Private Cloud environment (Amazon VPC)."
      },
      "DlqEventQueueArn": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "A valid Amazon dead-letter SQS ARN. For example, arn:aws:sqs:region:account:deadLetterQueue."
      },
      "EventQueueArn": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "A valid Amazon SQS ARN. For example, arn:aws:sqs:region:account:sqs."
      },
      "Exclusions": {
        "type": {
          "$ref": "#/21"
        },
        "flags": 0,
        "description": "A list of glob patterns used to exclude from the crawl."
      },
      "Path": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The path to the Amazon S3 target."
      },
      "SampleSize": {
        "type": {
          "$ref": "#/17"
        },
        "flags": 0,
        "description": "Sets the number of files in each leaf folder to be crawled when crawling sample files in a dataset. If not set, all the files are crawled. A valid value is an integer between 1 and 249."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "Schedule",
    "properties": {
      "ScheduleExpression": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "A cron expression used to specify the schedule. For more information, see Time-Based Schedules for Jobs and Crawlers. For example, to run something every day at 12:15 UTC, specify cron(15 12 * * ? *)."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "SchemaChangePolicy",
    "properties": {
      "DeleteBehavior": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The deletion behavior when the crawler finds a deleted object. A value of LOG specifies that if a table or partition is found to no longer exist, do not delete it, only log that it was found to no longer exist. A value of DELETE_FROM_DATABASE specifies that if a table or partition is found to have been removed, delete it from the database. A value of DEPRECATE_IN_DATABASE specifies that if a table has been found to no longer exist, to add a property to the table that says 'DEPRECATED' and includes a timestamp with the time of deprecation."
      },
      "UpdateBehavior": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The update behavior when the crawler finds a changed schema. A value of LOG specifies that if a table or a partition already exists, and a change is detected, do not update it, only log that a change was detected. Add new tables and new partitions (including on existing tables). A value of UPDATE_IN_DATABASE specifies that if a table or partition already exists, and a change is detected, update it. Add new tables and partitions."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "Targets",
    "properties": {
      "CatalogTargets": {
        "type": {
          "$ref": "#/22"
        },
        "flags": 0,
        "description": "Specifies AWS Glue Data Catalog targets."
      },
      "DeltaTargets": {
        "type": {
          "$ref": "#/23"
        },
        "flags": 0,
        "description": "Specifies an array of Delta data store targets."
      },
      "DynamoDBTargets": {
        "type": {
          "$ref": "#/24"
        },
        "flags": 0,
        "description": "Specifies Amazon DynamoDB targets."
      },
      "IcebergTargets": {
        "type": {
          "$ref": "#/25"
        },
        "flags": 0,
        "description": "Specifies Apache Iceberg data store targets."
      },
      "JdbcTargets": {
        "type": {
          "$ref": "#/26"
        },
        "flags": 0,
        "description": "Specifies JDBC targets."
      },
      "MongoDBTargets": {
        "type": {
          "$ref": "#/27"
        },
        "flags": 0,
        "description": "A list of Mongo DB targets."
      },
      "S3Targets": {
        "type": {
          "$ref": "#/28"
        },
        "flags": 0,
        "description": "Specifies Amazon Simple Storage Service (Amazon S3) targets."
      }
    }
  },
  {
    "$type": "StringType"
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/12"
    }
  },
  {
    "$type": "BooleanType"
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/12"
    }
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/12"
    }
  },
  {
    "$type": "IntegerType"
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/12"
    }
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/12"
    }
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/12"
    }
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/12"
    }
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/0"
    }
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/1"
    }
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/2"
    }
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/3"
    }
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/4"
    }
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/6"
    }
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/8"
    }
  },
  {
    "$type": "StringLiteralType",
    "value": "AWS.Glue/CrawlerProperties"
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/12"
    }
  },
  {
    "$type": "ObjectType",
    "name": "Crawler_Tags",
    "properties": {}
  },
  {
    "$type": "ObjectType",
    "name": "AWS.Glue/CrawlerProperties",
    "properties": {
      "Classifiers": {
        "type": {
          "$ref": "#/30"
        },
        "flags": 0,
        "description": "A list of UTF-8 strings that specify the names of custom classifiers that are associated with the crawler."
      },
      "Configuration": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior."
      },
      "CrawlerSecurityConfiguration": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The name of the SecurityConfiguration structure to be used by this crawler."
      },
      "DatabaseName": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The name of the database in which the crawler's output is stored."
      },
      "Description": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "A description of the crawler."
      },
      "LakeFormationConfiguration": {
        "type": {
          "$ref": "#/5"
        },
        "flags": 0
      },
      "Name": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 16,
        "description": "The name of the crawler."
      },
      "RecrawlPolicy": {
        "type": {
          "$ref": "#/7"
        },
        "flags": 0
      },
      "Role": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 1,
        "description": "The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources, such as Amazon Simple Storage Service (Amazon S3) data."
      },
      "Schedule": {
        "type": {
          "$ref": "#/9"
        },
        "flags": 0
      },
      "SchemaChangePolicy": {
        "type": {
          "$ref": "#/10"
        },
        "flags": 0
      },
      "TablePrefix": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The prefix added to the names of tables that are created."
      },
      "Tags": {
        "type": {
          "$ref": "#/31"
        },
        "flags": 0,
        "description": "The tags to use with this crawler."
      },
      "Targets": {
        "type": {
          "$ref": "#/11"
        },
        "flags": 1
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "AWS.Glue/Crawler",
    "properties": {
      "name": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "the resource name"
      },
      "alias": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 17,
        "description": "the resource alias"
      },
      "properties": {
        "type": {
          "$ref": "#/32"
        },
        "flags": 17,
        "description": "properties of the resource"
      }
    }
  },
  {
    "$type": "ResourceType",
    "name": "AWS.Glue/Crawler@default",
    "scopeType": 0,
    "body": {
      "$ref": "#/33"
    },
    "flags": 0
  },
  {
    "$type": "ObjectType",
    "name": "DataLakePrincipal",
    "properties": {
      "DataLakePrincipalIdentifier": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "An identifier for the AWS Lake Formation principal."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "DatabaseIdentifier",
    "properties": {
      "CatalogId": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The ID of the Data Catalog in which the database resides."
      },
      "DatabaseName": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 16,
        "description": "The name of the catalog database."
      },
      "Region": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "Region of the target database."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "DatabaseInput",
    "properties": {
      "CreateTableDefaultPermissions": {
        "type": {
          "$ref": "#/40"
        },
        "flags": 0,
        "description": "Creates a set of default permissions on the table for principals. Used by AWS Lake Formation. Not used in the normal course of AWS Glue operations."
      },
      "Description": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "A description of the database."
      },
      "FederatedDatabase": {
        "type": {
          "$ref": "#/38"
        },
        "flags": 0,
        "description": "A FederatedDatabase structure that references an entity outside the AWS Glue Data Catalog."
      },
      "LocationUri": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The location of the database (for example, an HDFS path)."
      },
      "Name": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The name of the database. For hive compatibility, this is folded to lowercase when it is stored."
      },
      "Parameters": {
        "type": {
          "$ref": "#/41"
        },
        "flags": 0,
        "description": "These key-value pairs define parameters and properties of the database."
      },
      "TargetDatabase": {
        "type": {
          "$ref": "#/36"
        },
        "flags": 0,
        "description": "A DatabaseIdentifier structure that describes a target database for resource linking."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "FederatedDatabase",
    "properties": {
      "ConnectionName": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The name of the connection to the external metastore."
      },
      "Identifier": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "A unique identifier for the federated database."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "PrincipalPrivileges",
    "properties": {
      "Permissions": {
        "type": {
          "$ref": "#/42"
        },
        "flags": 0,
        "description": "The permissions that are granted to the principal."
      },
      "Principal": {
        "type": {
          "$ref": "#/35"
        },
        "flags": 0,
        "description": "The principal who is granted permissions."
      }
    }
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/39"
    }
  },
  {
    "$type": "ObjectType",
    "name": "Database_Parameters",
    "properties": {}
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/12"
    }
  },
  {
    "$type": "StringLiteralType",
    "value": "AWS.Glue/DatabaseProperties"
  },
  {
    "$type": "ObjectType",
    "name": "AWS.Glue/DatabaseProperties",
    "properties": {
      "CatalogId": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 1,
        "description": "The AWS account ID for the account in which to create the catalog object."
      },
      "DatabaseInput": {
        "type": {
          "$ref": "#/37"
        },
        "flags": 1,
        "description": "The metadata for the database."
      },
      "DatabaseName": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 16,
        "description": "The name of the database. For hive compatibility, this is folded to lowercase when it is store."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "AWS.Glue/Database",
    "properties": {
      "name": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "the resource name"
      },
      "alias": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 17,
        "description": "the resource alias"
      },
      "properties": {
        "type": {
          "$ref": "#/44"
        },
        "flags": 17,
        "description": "properties of the resource"
      }
    }
  },
  {
    "$type": "ResourceType",
    "name": "AWS.Glue/Database@default",
    "scopeType": 0,
    "body": {
      "$ref": "#/45"
    },
    "flags": 0
  },
  {
    "$type": "ObjectType",
    "name": "ConnectionsList",
    "properties": {
      "Connections": {
        "type": {
          "$ref": "#/53"
        },
        "flags": 0,
        "description": "A list of connections used by the job."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "DefaultArguments",
    "properties": {
      "Key": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0
      },
      "Value": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "ExecutionProperty",
    "properties": {
      "MaxConcurrentRuns": {
        "type": {
          "$ref": "#/17"
        },
        "flags": 0,
        "description": "The maximum number of concurrent runs allowed for the job."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "JobCommand",
    "properties": {
      "Name": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 16,
        "description": "The name of the job command"
      },
      "PythonVersion": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The Python version being used to execute a Python shell job."
      },
      "Runtime": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "Runtime is used to specify the versions of Ray, Python and additional libraries available in your environment"
      },
      "ScriptLocation": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that executes a job"
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "NonOverridableArguments",
    "properties": {
      "Key": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0
      },
      "Value": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "NotificationProperty",
    "properties": {
      "NotifyDelayAfter": {
        "type": {
          "$ref": "#/17"
        },
        "flags": 0,
        "description": "It is the number of minutes to wait before sending a job run delay notification after a job run starts"
      }
    }
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/12"
    }
  },
  {
    "$type": "StringLiteralType",
    "value": "AWS.Glue/JobProperties"
  },
  {
    "$type": "ObjectType",
    "name": "Job_DefaultArguments",
    "properties": {}
  },
  {
    "$type": "ObjectType",
    "name": "Job_NonOverridableArguments",
    "properties": {}
  },
  {
    "$type": "ObjectType",
    "name": "Job_Tags",
    "properties": {}
  },
  {
    "$type": "ObjectType",
    "name": "AWS.Glue/JobProperties",
    "properties": {
      "AllocatedCapacity": {
        "type": {
          "$ref": "#/17"
        },
        "flags": 0,
        "description": "The number of capacity units that are allocated to this job."
      },
      "Command": {
        "type": {
          "$ref": "#/50"
        },
        "flags": 1,
        "description": "The code that executes a job."
      },
      "Connections": {
        "type": {
          "$ref": "#/47"
        },
        "flags": 0,
        "description": "Specifies the connections used by a job"
      },
      "DefaultArguments": {
        "type": {
          "$ref": "#/55"
        },
        "flags": 0,
        "description": "The default arguments for this job, specified as name-value pairs."
      },
      "Description": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "A description of the job."
      },
      "ExecutionClass": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "Indicates whether the job is run with a standard or flexible execution class."
      },
      "ExecutionProperty": {
        "type": {
          "$ref": "#/49"
        },
        "flags": 0,
        "description": "The maximum number of concurrent runs that are allowed for this job."
      },
      "GlueVersion": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "Glue version determines the versions of Apache Spark and Python that AWS Glue supports."
      },
      "JobMode": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "Property description not available."
      },
      "JobRunQueuingEnabled": {
        "type": {
          "$ref": "#/14"
        },
        "flags": 0,
        "description": "Property description not available."
      },
      "LogUri": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "This field is reserved for future use."
      },
      "MaintenanceWindow": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "Property description not available."
      },
      "MaxCapacity": {
        "type": {
          "$ref": "#/17"
        },
        "flags": 0,
        "description": "The number of AWS Glue data processing units (DPUs) that can be allocated when this job runs."
      },
      "MaxRetries": {
        "type": {
          "$ref": "#/17"
        },
        "flags": 0,
        "description": "The maximum number of times to retry this job after a JobRun fails"
      },
      "Name": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 16,
        "description": "The name you assign to the job definition"
      },
      "NonOverridableArguments": {
        "type": {
          "$ref": "#/56"
        },
        "flags": 0,
        "description": "Non-overridable arguments for this job, specified as name-value pairs."
      },
      "NotificationProperty": {
        "type": {
          "$ref": "#/52"
        },
        "flags": 0,
        "description": "Specifies configuration properties of a notification."
      },
      "NumberOfWorkers": {
        "type": {
          "$ref": "#/17"
        },
        "flags": 0,
        "description": "The number of workers of a defined workerType that are allocated when a job runs."
      },
      "Role": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 1,
        "description": "The name or Amazon Resource Name (ARN) of the IAM role associated with this job."
      },
      "SecurityConfiguration": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The name of the SecurityConfiguration structure to be used with this job."
      },
      "Tags": {
        "type": {
          "$ref": "#/57"
        },
        "flags": 0,
        "description": "The tags to use with this job."
      },
      "Timeout": {
        "type": {
          "$ref": "#/17"
        },
        "flags": 0,
        "description": "The maximum time that a job run can consume resources before it is terminated and enters TIMEOUT status."
      },
      "WorkerType": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "TThe type of predefined worker that is allocated when a job runs."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "AWS.Glue/Job",
    "properties": {
      "name": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "the resource name"
      },
      "alias": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 17,
        "description": "the resource alias"
      },
      "properties": {
        "type": {
          "$ref": "#/58"
        },
        "flags": 17,
        "description": "properties of the resource"
      }
    }
  },
  {
    "$type": "ResourceType",
    "name": "AWS.Glue/Job@default",
    "scopeType": 0,
    "body": {
      "$ref": "#/59"
    },
    "flags": 0
  },
  {
    "$type": "ObjectType",
    "name": "Tag",
    "properties": {
      "Key": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 1,
        "description": "A key to identify the tag."
      },
      "Value": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 1,
        "description": "Corresponding tag value for the key."
      }
    }
  },
  {
    "$type": "StringLiteralType",
    "value": "AWS.Glue/RegistryProperties"
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/61"
    }
  },
  {
    "$type": "ObjectType",
    "name": "AWS.Glue/RegistryProperties",
    "properties": {
      "Arn": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 18,
        "description": "Amazon Resource Name for the created Registry."
      },
      "Description": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "A description of the registry. If description is not provided, there will not be any default value for this."
      },
      "Name": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 1,
        "description": "Name of the registry to be created of max length of 255, and may only contain letters, numbers, hyphen, underscore, dollar sign, or hash mark.  No whitespace."
      },
      "Tags": {
        "type": {
          "$ref": "#/63"
        },
        "flags": 0,
        "description": "List of tags to tag the Registry"
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "AWS.Glue/Registry",
    "properties": {
      "name": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "the resource name"
      },
      "alias": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 17,
        "description": "the resource alias"
      },
      "properties": {
        "type": {
          "$ref": "#/64"
        },
        "flags": 17,
        "description": "properties of the resource"
      }
    }
  },
  {
    "$type": "ResourceType",
    "name": "AWS.Glue/Registry@default",
    "scopeType": 0,
    "body": {
      "$ref": "#/65"
    },
    "flags": 0
  },
  {
    "$type": "ObjectType",
    "name": "Registry",
    "properties": {
      "Arn": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 16,
        "description": "Amazon Resource Name for the Registry."
      },
      "Name": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "Name of the registry in which the schema will be created."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "SchemaVersion",
    "properties": {
      "IsLatest": {
        "type": {
          "$ref": "#/14"
        },
        "flags": 0,
        "description": "Indicates if the latest version needs to be updated."
      },
      "VersionNumber": {
        "type": {
          "$ref": "#/17"
        },
        "flags": 0,
        "description": "Indicates the version number in the schema to update."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "Tag",
    "properties": {
      "Key": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 1,
        "description": "A key to identify the tag."
      },
      "Value": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 1,
        "description": "Corresponding tag value for the key."
      }
    }
  },
  {
    "$type": "StringLiteralType",
    "value": "AWS.Glue/SchemaProperties"
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/69"
    }
  },
  {
    "$type": "ObjectType",
    "name": "AWS.Glue/SchemaProperties",
    "properties": {
      "Arn": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 18,
        "description": "Amazon Resource Name for the Schema."
      },
      "CheckpointVersion": {
        "type": {
          "$ref": "#/68"
        },
        "flags": 0
      },
      "Compatibility": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 1,
        "description": "Compatibility setting for the schema."
      },
      "DataFormat": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 1,
        "description": "Data format name to use for the schema. Accepted values: 'AVRO', 'JSON', 'PROTOBUF'"
      },
      "Description": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "A description of the schema. If description is not provided, there will not be any default value for this."
      },
      "InitialSchemaVersionId": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 2,
        "description": "Represents the version ID associated with the initial schema version."
      },
      "Name": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 1,
        "description": "Name of the schema."
      },
      "Registry": {
        "type": {
          "$ref": "#/67"
        },
        "flags": 0
      },
      "SchemaDefinition": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 4,
        "description": "Definition for the initial schema version in plain-text."
      },
      "Tags": {
        "type": {
          "$ref": "#/71"
        },
        "flags": 0,
        "description": "List of tags to tag the schema"
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "AWS.Glue/Schema",
    "properties": {
      "name": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "the resource name"
      },
      "alias": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 17,
        "description": "the resource alias"
      },
      "properties": {
        "type": {
          "$ref": "#/72"
        },
        "flags": 17,
        "description": "properties of the resource"
      }
    }
  },
  {
    "$type": "ResourceType",
    "name": "AWS.Glue/Schema@default",
    "scopeType": 0,
    "body": {
      "$ref": "#/73"
    },
    "flags": 0
  },
  {
    "$type": "ObjectType",
    "name": "Action",
    "properties": {
      "Arguments": {
        "type": {
          "$ref": "#/80"
        },
        "flags": 0,
        "description": "The job arguments used when this trigger fires. For this job run, they replace the default arguments set in the job definition itself."
      },
      "CrawlerName": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The name of the crawler to be used with this action."
      },
      "JobName": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The name of a job to be executed."
      },
      "NotificationProperty": {
        "type": {
          "$ref": "#/78"
        },
        "flags": 0,
        "description": "Specifies configuration properties of a job run notification."
      },
      "SecurityConfiguration": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The name of the SecurityConfiguration structure to be used with this action."
      },
      "Timeout": {
        "type": {
          "$ref": "#/17"
        },
        "flags": 0,
        "description": "The JobRun timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "Condition",
    "properties": {
      "CrawlState": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The state of the crawler to which this condition applies."
      },
      "CrawlerName": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The name of the crawler to which this condition applies."
      },
      "JobName": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The name of the job whose JobRuns this condition applies to, and on which this trigger waits."
      },
      "LogicalOperator": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "A logical operator."
      },
      "State": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The condition state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT, and FAILED."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "EventBatchingCondition",
    "properties": {
      "BatchSize": {
        "type": {
          "$ref": "#/17"
        },
        "flags": 1,
        "description": "Number of events that must be received from Amazon EventBridge before EventBridge event trigger fires."
      },
      "BatchWindow": {
        "type": {
          "$ref": "#/17"
        },
        "flags": 0,
        "description": "Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "NotificationProperty",
    "properties": {
      "NotifyDelayAfter": {
        "type": {
          "$ref": "#/17"
        },
        "flags": 0,
        "description": "After a job run starts, the number of minutes to wait before sending a job run delay notification"
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "Predicate",
    "properties": {
      "Conditions": {
        "type": {
          "$ref": "#/81"
        },
        "flags": 0,
        "description": "A list of the conditions that determine when the trigger will fire."
      },
      "Logical": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "An optional field if only one condition is listed. If multiple conditions are listed, then this field is required."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "Trigger_Arguments",
    "properties": {}
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/76"
    }
  },
  {
    "$type": "StringLiteralType",
    "value": "AWS.Glue/TriggerProperties"
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/75"
    }
  },
  {
    "$type": "ObjectType",
    "name": "Trigger_Tags",
    "properties": {}
  },
  {
    "$type": "ObjectType",
    "name": "AWS.Glue/TriggerProperties",
    "properties": {
      "Actions": {
        "type": {
          "$ref": "#/83"
        },
        "flags": 1,
        "description": "The actions initiated by this trigger."
      },
      "Description": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "A description of this trigger."
      },
      "EventBatchingCondition": {
        "type": {
          "$ref": "#/77"
        },
        "flags": 0,
        "description": "Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires."
      },
      "Name": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 16,
        "description": "The name of the trigger."
      },
      "Predicate": {
        "type": {
          "$ref": "#/79"
        },
        "flags": 0,
        "description": "The predicate of this trigger, which defines when it will fire."
      },
      "Schedule": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "A cron expression used to specify the schedule."
      },
      "StartOnCreation": {
        "type": {
          "$ref": "#/14"
        },
        "flags": 4,
        "description": "Set to true to start SCHEDULED and CONDITIONAL triggers when created. True is not supported for ON_DEMAND triggers."
      },
      "Tags": {
        "type": {
          "$ref": "#/84"
        },
        "flags": 0,
        "description": "The tags to use with this trigger."
      },
      "Type": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 1,
        "description": "The type of trigger that this is."
      },
      "WorkflowName": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The name of the workflow associated with the trigger."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "AWS.Glue/Trigger",
    "properties": {
      "name": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "the resource name"
      },
      "alias": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 17,
        "description": "the resource alias"
      },
      "properties": {
        "type": {
          "$ref": "#/85"
        },
        "flags": 17,
        "description": "properties of the resource"
      }
    }
  },
  {
    "$type": "ResourceType",
    "name": "AWS.Glue/Trigger@default",
    "scopeType": 0,
    "body": {
      "$ref": "#/86"
    },
    "flags": 0
  },
  {
    "$type": "ObjectType",
    "name": "ConfigurationObject",
    "properties": {
      "AllowedValues": {
        "type": {
          "$ref": "#/91"
        },
        "flags": 0
      },
      "DefaultValue": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0
      },
      "MaxValue": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0
      },
      "MinValue": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "ProfileConfiguration",
    "properties": {
      "JobConfiguration": {
        "type": {
          "$ref": "#/92"
        },
        "flags": 0
      },
      "SessionConfiguration": {
        "type": {
          "$ref": "#/93"
        },
        "flags": 0
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "Tag",
    "properties": {
      "Key": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 1,
        "description": "A key to identify the tag."
      },
      "Value": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 1,
        "description": "Corresponding tag value for the key."
      }
    }
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/12"
    }
  },
  {
    "$type": "ObjectType",
    "name": "UsageProfile_JobConfiguration",
    "properties": {}
  },
  {
    "$type": "ObjectType",
    "name": "UsageProfile_SessionConfiguration",
    "properties": {}
  },
  {
    "$type": "StringLiteralType",
    "value": "AWS.Glue/UsageProfileProperties"
  },
  {
    "$type": "ArrayType",
    "itemType": {
      "$ref": "#/90"
    }
  },
  {
    "$type": "ObjectType",
    "name": "AWS.Glue/UsageProfileProperties",
    "properties": {
      "Configuration": {
        "type": {
          "$ref": "#/89"
        },
        "flags": 0,
        "description": "UsageProfile configuration for supported service ex: (Jobs, Sessions)."
      },
      "CreatedOn": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 2,
        "description": "Creation time."
      },
      "Description": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "The description of the UsageProfile."
      },
      "Name": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 17,
        "description": "The name of the UsageProfile."
      },
      "Tags": {
        "type": {
          "$ref": "#/95"
        },
        "flags": 0,
        "description": "The tags to be applied to this UsageProfiles."
      }
    }
  },
  {
    "$type": "ObjectType",
    "name": "AWS.Glue/UsageProfile",
    "properties": {
      "name": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 0,
        "description": "the resource name"
      },
      "alias": {
        "type": {
          "$ref": "#/12"
        },
        "flags": 17,
        "description": "the resource alias"
      },
      "properties": {
        "type": {
          "$ref": "#/96"
        },
        "flags": 17,
        "description": "properties of the resource"
      }
    }
  },
  {
    "$type": "ResourceType",
    "name": "AWS.Glue/UsageProfile@default",
    "scopeType": 0,
    "body": {
      "$ref": "#/97"
    },
    "flags": 0
  }
]